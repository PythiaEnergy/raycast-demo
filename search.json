[
  {
    "objectID": "raycast_explained.html",
    "href": "raycast_explained.html",
    "title": "RayCast explained",
    "section": "",
    "text": "Quantile approach\nMost competitors in the market provide deterministic solar irradiance forecasts, which are straightforward to use but often oversimplified and unrealistic. As a professional in this field, you know that forecasts are rarely, if ever, entirely accurate. The critical question is: by how much are they off? With our probabilistic approach, we offer insights into the uncertainty surrounding solar irradiance predictions. This enables you to make more informed, risk-aware decisions.\n\n\n\nPrecision\nOur approach allows us to achieve high precision, delivering forecasts with a grid resolution of 4 x 6 km¬≤ for every location in the Netherlands. This level of detail is made possible by combining satellite data with our expertise in weather analysis and advanced algorithms. Compared to most competitors, this has significantly higher resolution, enabling you to access highly localized forecasts tailored to your specific location.\n\n\n\nSpeed\nMost solar irradiance forecasting products are designed for day-ahead planning, relying on numerical weather predictions that perform adequately for longer-term forecasts. However, these models are not ideal for short-term predictions. That‚Äôs where we come in. Our forecasts bridge this gap, providing highly accurate predictions up to 6 hours ahead, delivered in 15-minute intervals. This enables you to effectively mitigate short-term risks and make more informed decisions."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Maximize the potential of your renewables",
    "section": "",
    "text": "Welcome to the technical website for RayCast. Here you‚Äôll find information on our innovative approach for solar irradiance forecasting. With RayCast we are working on minimzing intraday imbalance volumes by building predictions with the highest accuracy possible. Driven by our combination of cutting-edge AI models and access to novel data sources.\nThis website is designed for technical and non-technical users that are considering using the API of RayCast. This website contains the following topics:\n\n\nGet Started - a step by step guide on how to use the API.\n\n\nRayCast explained - information about our unique algorithm.\n\n\nFAQ - your first aid kit for using RayCast\n\n\nContact - want to have a demo?"
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "**I can‚Äôt use probabilistic values in my business yet, what to do?\nAnswer X\n\n\n**Can I do a historical analysis with your data?\nAnswer X\n\n\n**Did you compare it with other data sources like Harmonie and ICON?\nAnswer X"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Give us a call or send a message to get in touch\n\nPhone: +316 21202609\nEmail: info@pythia-energy.nl\nVisit our website"
  },
  {
    "objectID": "get_started.html",
    "href": "get_started.html",
    "title": "Get Started",
    "section": "",
    "text": "Step 1: Register and get API key.\nRegister to get an account.\n\n\nStep 2: understand API endpoints\n\nGet to know the available endpoints. Detailed information can be found here.\nIn short, we provide two types of endpoints: one for specific locations and another for the entire grid of the Netherlands.\n\n\n\nStep 3: Make your first API call\n\nImport packages\n\n\nimport requests\nimport json\n\ndef get_firebase_auth_headers(\n    username: str,\n    password: str\n) -&gt; dict[str, str]:\n    \"\"\"\n    Authenticate a user with Firebase and return \n    the authorization headers required for subsequent \n    API requests.\n    \n    Parameters:\n    ----------\n    username: str\n        The email address of the user.\n    password: str\n        The password of the user.\n    \"\"\" \n    firebase_key = \"AIzaSyCECGQmWsGaZ3x7n_uGiq3kt-lyo-IYPvI\"\n    firebase_url = \"https://identitytoolkit.googleapis.com/v1\"\n    firebase_endpoint = f\"{firebase_url}/accounts:signInWithPassword?key={firebase_key}\"\n    data_dict = {'email': username, 'password': password, 'returnSecureToken': 'true'}\n    response_post_token = requests.post(\n        firebase_endpoint, \n        data=data_dict\n        )\n    if response_post_token.status_code == 200:\n        id_token = response_post_token.json()['idToken']\n        headers = {\n            \"Content-Type\": \"application/json\", \n            \"Authorization\": f\"Bearer {id_token}\"\n            }   \n    else:\n        print(f\"Failed to authenticate user with Firebase. {response_post_token.text}\")\n        headers = {\n            \"Content-Type\": \"application/json\", \n            \"Authorization\" : \"\"\n            } \n    return headers\n\nAuthenticate\n\nusername = 'your_username'\npassword = 'your_password'\n\nheaders = get_firebase_auth_headers(username, password)\nprint(headers)\n\nMake a request\n\ndata = json.dumps({\n    \"forecast_datetime\":\"2025-01-01T12:00:00Z\"\n})\n\nresponse=requests.post(\n    \"https://api.raycast.nl/irradiance\", \n    headers=headers, \n    data=data\n)\n\nwith open ('output.nc','wb') as f: \n  f.write(response.content)\n\n\nStep 4: integrate the API into your application\n\nChoose your preferred programming language (e.g., Python, Rust etc.)"
  },
  {
    "objectID": "mqtt.html",
    "href": "mqtt.html",
    "title": "MQTT",
    "section": "",
    "text": "Step 1: Get a username and password.\nTo use the MQTT service, you‚Äôll first need to register and receive your credentials.\n\nGet a username and password by contacting us at info@pythia-energy.nl\nYou‚Äôll receive a username and password ‚Äî save these securely.\n\nContinue to the next step once you have your credentials.\n\n\nExample: Connect to the MQTT broker and receive messages\n\nfrom paho.mqtt import client as mqtt_client\nimport random\nimport ssl\nimport json \n\nbroker = \"mqtt.pythia-energy.nl\"\nport = 8883\ntopic = \"raycast/#\"\nclient_id = f'python-mqtt-{random.randint(0, 1000)}'\nusername = \"your-username\"\npassword = \"your-password\"\n\nconnected = False  # Global flag\n\ndef on_connect(client, userdata, flags, rc, properties=None):\n    global connected\n    if rc == 0:\n        print(\"‚úÖ Connected to MQTT Broker!\")\n        connected = True\n        client.subscribe(topic)\n        print(f\"üì° Subscribed to topic `{topic}`\")\n    else:\n        print(f\"‚ùå Failed to connect, return code {rc}\")\n\ndef on_message(client, userdata, msg):\n    print(f\"\\nüì• Received message on topic `{msg.topic}`\")\n    try:\n        payload = json.loads(msg.payload.decode())\n        print(json.dumps(payload, indent=2))\n    except json.JSONDecodeError:\n        print(f\"‚ö†Ô∏è Raw message: {msg.payload.decode()}\")\n\ndef connect_mqtt():\n    client = mqtt_client.Client(\n        client_id=client_id,\n        protocol=mqtt_client.MQTTv5\n    )\n\n    client.tls_set(tls_version=ssl.PROTOCOL_TLSv1_2)\n    client.tls_insecure_set(True)\n\n    client.username_pw_set(username, password)\n    client.on_connect = on_connect\n    client.on_message = on_message\n    client.connect(broker, port)\n    return client\n\ndef run():\n    client = connect_mqtt()\n    client.loop_forever()\n\nif __name__ == \"__main__\":\n    run()\n\n\nMesssage format\nHere‚Äôs an example of a message you might receive:\n{\n  \"type\": \"forecast\",\n  \"parameter\": \"global horizontal irradiance\",\n  \"forecast_datetime\": \"2025-01-01T12:00:00Z\"\n}"
  }
]